<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>CoffeeCup AI Assistant - Chat Interface</title>
    <style>
        :root {
            --bg: #0b1020;
            --surface: #141a2a;
            --card: #1b2140;
            --text: #e9eeff;
            --muted: #a6adbb;
            --border: #2a3150;
            --primary: #4f8cff;
            --primary-hover: #3a7be0;
            --success: #28a745;
            --danger: #dc3545;
            --warning: #ffc107;
            --shadow: 0 12px 28px rgba(0,0,0,.32);
            --radius: 14px;
            --transition: all 0.3s ease;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #0b0f1a 0%, #0a1220 100%);
            color: var(--text);
            min-height: 100vh;
            padding: 20px;
            margin: 0;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            display: grid;
            grid-template-columns: 350px 1fr;
            gap: 24px;
            height: calc(100vh - 40px);
        }

        .sidebar {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .main-content {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .card {
            background: linear-gradient(180deg, rgba(22,26,48,.98), rgba(20,24,40,.96));
            border: 1px solid var(--border);
            border-radius: var(--radius);
            box-shadow: var(--shadow);
            padding: 20px;
            backdrop-filter: blur(10px);
        }

        .header {
            padding: 16px 20px;
            border-bottom: 1px solid var(--border);
            background: linear-gradient(135deg, rgba(79,140,255,.15), rgba(79,140,255,.05));
            border-radius: var(--radius) var(--radius) 0 0;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }

        .header h1 {
            font-size: 18px;
            font-weight: 600;
            letter-spacing: 0.5px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .header h1::before {
            content: "ü§ñ";
            font-size: 20px;
        }

        .badge {
            font-size: 12px;
            padding: 4px 12px;
            border-radius: 20px;
            background: rgba(79,140,255,.2);
            border: 1px solid rgba(79,140,255,.3);
        }

        .section-title {
            font-size: 12px;
            text-transform: uppercase;
            color: var(--muted);
            letter-spacing: 0.5px;
            padding: 8px 0;
            margin-bottom: 12px;
            border-bottom: 1px solid var(--border);
        }

        .form-group {
            margin-bottom: 16px;
        }

        label {
            display: block;
            font-size: 13px;
            color: var(--muted);
            margin-bottom: 6px;
            font-weight: 500;
        }

        select, input, textarea {
            width: 100%;
            background: rgba(1,16,32,0.7);
            color: var(--text);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 14px;
            font-family: inherit;
            font-size: 14px;
            transition: var(--transition);
        }

        select:focus, input:focus, textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(79,140,255,0.2);
        }

        textarea {
            min-height: 120px;
            resize: vertical;
            font-family: 'JetBrains Mono', 'Fira Code', 'Consolas', monospace;
            line-height: 1.5;
        }

        .btn-group {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
            margin: 16px 0;
        }

        button {
            padding: 12px 20px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: var(--transition);
            flex: 1;
            min-width: 100px;
        }

        button:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
        }

        button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background: var(--primary-hover);
        }

        .btn-success {
            background: var(--success);
            color: white;
        }

        .btn-success:hover:not(:disabled) {
            background: #218838;
        }

        .btn-danger {
            background: var(--danger);
            color: white;
        }

        .btn-danger:hover:not(:disabled) {
            background: #c82333;
        }

        .btn-warning {
            background: var(--warning);
            color: #212529;
        }

        .btn-warning:hover:not(:disabled) {
            background: #e0a800;
        }

        .chat-container {
            display: flex;
            flex-direction: column;
            height: 100%;
        }

        .messages {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            display: flex;
            flex-direction: column;
            gap: 12px;
            max-height: calc(100vh - 200px);
        }

        .message {
            max-width: 85%;
            padding: 14px 16px;
            border-radius: 18px;
            line-height: 1.5;
            position: relative;
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        .user-message {
            align-self: flex-end;
            background: linear-gradient(135deg, #2e6ae0, #1e4a9e);
            color: white;
            border-bottom-right-radius: 4px;
        }

        .assistant-message {
            align-self: flex-start;
            background: rgba(27,3,64,0.8);
            color: var(--text);
            border-bottom-left-radius: 4px;
        }

        .message-header {
            font-size: 12px;
            font-weight: 600;
            margin-bottom: 4px;
            opacity: 0.8;
        }

        .message-content {
            white-space: pre-wrap;
            font-size: 14px;
        }

        .message-timestamp {
            font-size: 11px;
            opacity: 0.7;
            margin-top: 6px;
            text-align: right;
        }

        .composer {
            display: flex;
            gap: 12px;
            padding: 16px;
            border-top: 1px solid var(--border);
            background: rgba(10,12,25,.9);
        }

        .composer textarea {
            flex: 1;
            min-height: 60px;
            resize: vertical;
            background: rgba(1,16,32,0.7);
            border: 1px solid var(--border);
            border-radius: 10px;
            padding: 12px 14px;
            font-family: inherit;
            font-size: 14px;
            color: var(--text);
        }

        .composer textarea:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 2px rgba(79,140,255,0.2);
        }

        .composer-buttons {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .status-indicator {
            display: flex;
            align-items: center;
            gap: 8px;
            padding: 12px;
            border-radius: 8px;
            margin: 12px 0;
            font-size: 13px;
        }

        .status-indicator.success {
            background: rgba(40,167,69,0.1);
            border: 1px solid rgba(40,167,69,0.3);
            color: #28a745;
        }

        .status-indicator.error {
            background: rgba(20,53,69,0.1);
            border: 1px solid rgba(220,53,69,0.3);
            color: #dc3545;
        }

        .status-indicator.loading {
            background: rgba(79,140,255,0.1);
            border: 1px solid rgba(79,140,255,0.3);
            color: var(--primary);
        }

        .status-indicator::before {
            content: "‚óè";
            font-size: 16px;
        }

        .status-indicator.success::before {
            color: #28a745;
        }

        .status-indicator.error::before {
            color: #dc3545;
        }

        .status-indicator.loading::before {
            color: var(--primary);
            animation: pulse 1.5s ease-in-out infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .instructions {
            background: rgba(79,140,255,0.1);
            border: 1px solid rgba(79,140,255,0.2);
            border-radius: 10px;
            padding: 16px;
            font-size: 13px;
            line-height: 1.6;
        }

        .instructions ol {
            padding-left: 20px;
            margin: 10px 0;
        }

        .instructions li {
            margin-bottom: 8px;
        }

        .model-info {
            font-size: 12px;
            color: var(--muted);
            margin-top: 4px;
        }

        @media (max-width: 1024px) {
            .container {
                grid-template-columns: 1fr;
                height: auto;
                gap: 20px;
            }
            
            .main-content, .sidebar {
                height: auto;
            }
            
            .message {
                max-width: 95%;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="sidebar">
            <div class="card">
                <div class="header">
                    <h1>AI Assistant</h1>
                    <div class="badge">Ready</div>
                </div>

                <div class="form-group">
                    <label for="backend">Backend Service</label>
                    <select id="backend">
                        <option value="ollama">Ollama (Local Models)</option>
                        <option value="openrouter">OpenRouter (Cloud Models)</option>
                    </select>
                    <div class="model-info">Choose your preferred AI service provider</div>
                </div>

                <div class="form-group">
                    <label for="model">Model Name (Optional)</label>
                    <input 
                        type="text" 
                        id="model" 
                        placeholder="e.g., gemma3, llama3, gpt-4o-mini"
                        value="gemma3">
                    <div class="model-info">Leave empty to use default model</div>
                </div>

                <div class="form-group">
                    <label for="prompt">Your Code or Question</label>
                    <textarea 
                        id="prompt" 
                        placeholder="Paste your HTML/CSS/JavaScript code here or ask a question...">// Example HTML code
<!DOCTYPE html>
<html>
<head>
    <title>My Page</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Welcome</h1>
        <p>This is a sample page.</p>
    </div>
</body>
</html></textarea>
                </div>

                <div class="form-group">
                    <label for="filePath">File Path (for Apply)</label>
                    <input 
                        type="text" 
                        id="filePath" 
                        placeholder="e.g., index.html, src/app.js">
                    <div class="model-info">Relative path for file operations</div>
                </div>

                <div class="btn-group">
                    <button class="btn-primary" id="suggestBtn">
                        ü§ñ Suggest
                    </button>
                    <button class="btn-success" id="explainBtn">
                        üîç Explain
                    </button>
                    <button class="btn-warning" id="applyBtn">
                        ‚ú® Apply
                    </button>
                </div>

                <div class="status-indicator" id="statusIndicator" style="display: none;">
                    <span id="statusText"></span>
                </div>
            </div>

            <div class="card">
                <h3 class="section-title">Quick Instructions</h3>
                <div class="instructions">
                    <ol>
                        <li>Ensure AI assistant server is running</li>
                        <li>Enter your code in the editor</li>
                        <li>Select backend and model (optional)</li>
                        <li>Click appropriate action button</li>
                        <li>Review AI response and apply changes</li>
                    </ol>
                </div>
            </div>
        </div>

        <div class="main-content">
            <div class="card">
                <div class="header">
                    <h1>Chat Conversation</h1>
                    <div class="badge">Live</div>
                </div>

                <div class="chat-container">
                    <div class="messages" id="messages">
                        <div class="message assistant-message">
                            <div class="message-header">AI Assistant</div>
                            <div class="message-content">Hello! I'm your CoffeeCup AI Assistant. Paste your code or ask me a question, and I'll help you with suggestions, explanations, or code improvements.</div>
                            <div class="message-timestamp">Just now</div>
                        </div>
                    </div>

                    <div class="composer">
                        <textarea 
                            id="chatInput" 
                            placeholder="Type your message or code to chat with the AI assistant..."
                            rows="2"></textarea>
                        <div class="composer-buttons">
                            <button class="btn-primary" id="sendBtn">Send</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        let isProcessing = false;
        let conversationHistory = [];

        function showStatus(message, type = 'loading') {
            const indicator = document.getElementById('statusIndicator');
            const statusText = document.getElementById('statusText');
            
            statusText.textContent = message;
            indicator.className = 'status-indicator';
            indicator.classList.add(type);
            indicator.style.display = 'flex';
        }

        function hideStatus() {
            document.getElementById('statusIndicator').style.display = 'none';
        }

        function addMessage(author, content, timestamp = new Date()) {
            const messagesEl = document.getElementById('messages');
            const messageEl = document.createElement('div');
            
            messageEl.className = `message ${author}-message`;
            messageEl.innerHTML = `
                <div class="message-header">${author === 'user' ? 'You' : 'AI Assistant'}</div>
                <div class="message-content">${content}</div>
                <div class="message-timestamp">${timestamp.toLocaleTimeString()}</div>
            `;
            
            messagesEl.appendChild(messageEl);
            messagesEl.scrollTop = messagesEl.scrollHeight;
            
            // Add to conversation history
            conversationHistory.push({ role: author, content, timestamp });
        }

        async function callAssistant(action) {
            if (isProcessing) return;
            
            const prompt = document.getElementById('prompt').value;
            const backend = document.getElementById('backend').value;
            const model = document.getElementById('model').value.trim() || undefined;
            const filePath = document.getElementById('filePath').value.trim() || undefined;

            if (!prompt && action !== 'apply') {
                showStatus('Please enter some code first!', 'error');
                setTimeout(hideStatus, 9000);
                return;
            }

            if (action === 'apply' && !filePath) {
                if (!confirm('No file path provided. Proceed without writing file?')) {
                    return;
                }
            }

            isProcessing = true;
            const actionText = {
                'suggest': 'Suggesting improvements...',
                'explain': 'Analyzing code...',
                'apply': 'Applying changes...'
            }[action];
            
            addMessage('user', `${actionText}\n\n${prompt}`);
            showStatus(actionText, 'loading');

            try {
                const response = await fetch('/api/assistant', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        backend,
                        model,
                        action,
                        prompt,
                        filePath
                    })
                });

                if (!response.ok) {
                    const errorData = await response.json().catch(() => ({}));
                    throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                addMessage('assistant', data.text);
                showStatus('Success!', 'success');
                setTimeout(hideStatus, 6000);

            } catch (error) {
                console.error('API Error:', error);
                const errorMessage = error.message.includes('ECONNREFUSED') || error.message.includes('Failed to fetch') 
                    ? 'Server connection failed. Make sure the server is running on http://localhost:3690' 
                    : error.message;
                addMessage('assistant', `Error: ${errorMessage}`);
                showStatus('Request failed', 'error');
                setTimeout(hideStatus, 9000);
            } finally {
                isProcessing = false;
            }
        }

        async function sendChatMessage() {
            const chatInput = document.getElementById('chatInput');
            const message = chatInput.value.trim();
            
            if (!message) return;

            chatInput.value = '';
            addMessage('user', message);

            try {
                showStatus('Thinking...', 'loading');
                
                const response = await fetch('/api/assistant', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        backend: document.getElementById('backend').value,
                        model: document.getElementById('model').value.trim() || undefined,
                        action: 'suggest',
                        prompt: message,
                        filePath: undefined
                    })
                });

                const data = await response.json();

                if (!response.ok) {
                    throw new Error(data.error || 'Unknown error occurred');
                }

                addMessage('assistant', data.text);
                showStatus('Success!', 'success');
                setTimeout(hideStatus, 6000);

            } catch (error) {
                addMessage('assistant', `Error: ${error.message}`);
                showStatus('Request failed', 'error');
                setTimeout(hideStatus, 9000);
            }
        }

        // Event listeners
        document.getElementById('suggestBtn').addEventListener('click', () => callAssistant('suggest'));
        document.getElementById('explainBtn').addEventListener('click', () => callAssistant('explain'));
        document.getElementById('applyBtn').addEventListener('click', () => callAssistant('apply'));
        
        document.getElementById('sendBtn').addEventListener('click', sendChatMessage);
        
        document.getElementById('chatInput').addEventListener('keydown', function(e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                sendChatMessage();
            }
        });

        // Auto-resize textarea
        document.getElementById('prompt').addEventListener('input', function(e) {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });

        document.getElementById('chatInput').addEventListener('input', function(e) {
            this.style.height = 'auto';
            this.style.height = (this.scrollHeight) + 'px';
        });
    </script>
</body>
</html>
